# Uncomment any below to change compiler behavior
TOOLCHAIN = GNU
#HAS_PYTHON = TRUE
HAS_CGNS = TRUE
#HAS_OPENMP = TRUE
#DEBUG = TRUE
#EFENCE = TRUE
#PENGUIN = TRUE
#JUMPSHOT = TRUE
#PROFILE = TRUE

SHELL :=/bin/bash

ifndef TARGET
       $(warning TARGET must be defined on command line. Try make TARGET=home)
       $(warning Setting TARGET=home because I'm a nice guy)
       TARGET = home
endif

#This overrides the compiler setting if we are on a home machine
ifeq ($(TARGET),home)
     TOOLCHAIN = GNU
endif

#intel
ifeq ($(TOOLCHAIN),INTEL)
	CXX = icc
	MPICXX = mpicxx
	CXX_OPTS = -O3 -g 
	#CXX_OPTS = -O0 -g -guide 
	#CXX_OPTS += -opt-report[3] -march=core2
	LINK_OPTS = 
	FXX = ifort
	FXX_OPTS = -O3
	FXX_LINK_OPTS = -r8 -nofor_main
	HDF5INSTALLDIR = /usr/local/hdf5-1.8.11/
endif

#GNU
ifeq ($(TOOLCHAIN),GNU)
	CXX = g++
	MPICXX = mpicc.openmpi
	#CXX_OPTS = -O0 -g -std=c++11 -fPIC
	CXX_OPTS = -O3 -g -std=c++11 -fPIC 
	LINK_OPTS = -Bstatic
	FXX = mpif90
	FXX_OPTS = -O3 
	FXX_LINK_OPTS = -fdefault-real-8 -fdefault-double-8 
endif

#IBM XLC
ifeq ($(TOOLCHAIN),IBM)
	CXX = xlc++
	MPICXX = mpicxx
	CXX_OPTS = -q64 -O5 -Wall 
	#may use up to level 7 here for vectorizer reports
	#CXX_OPTS += -Wall -ftree-vectorizer-verbose=5 -fdump-tree-vect -std=c++0x
	LINK_OPTS = -q64
	FXX = ifort
	FXX = xlf
	FXX_OPTS = -O2
	FXX_LINK_OPTS = 
endif

ifdef JUMPSHOT
      MPICXX = mpecc -mpilog -mpicc="mpicxx"
endif

ifdef PROFILE
      #no-pie flag is to workaround a glibc bug that generates no output from gprof
      CXX_OPTS += -pg -no-pie
      LINK_OPTS += -pg -no-pie
endif   

TINYXMLDIR = ./TPLs/tinyxml/tinyxml-2.6.2
TINYXML_INCLUDES = ./TPLs/tinyxml/tinyxml-2.6.2
TINYXML_LIB = ./TPLs/tinyxml/tinyxml-2.6.2

METISDIR = /TPLs/metis/metis-5.0.2
METISINSTALLDIR = ./$(METISDIR)/build/Linux-x86_64/libmetis
METIS_LIB = $(METISINSTALLDIR)
METIS_INCLUDES = .$(METISDIR)/include

# Self-TPLs build
HDF5DIR = /TPLs/hdf5/hdf5-1.8.10-patch1
#HDF5_LIB = ./$(HDF5DIR)/build/lib
#HDF5_INCLUDE_PATH = ./$(HDF5DIR)/build/include
HDF5_LIB = /usr/lib/x86_64-linux-gnu/

# Debian installs this kind of weird you may need to symlink it like:
# ln -s /usr/lib/x86_64-linux-gnu/libhdf5_serial.a /usr/lib/x86_64-linux-gnu/libhdf5.a
# ln -s /usr/lib/x86_64-linux-gnu/libhdf5_serial.so /usr/lib/x86_64-linux-gnu/libhdf5.so
ifeq ($(HDF5_INCLUDE_PATH),)
     HDF5_INCLUDE_PATH := /usr/include/hdf5/serial/
endif

GTESTDIR = ./TPLs/gtest/gtest-1.7.0/
GTEST_LIB = $(GTESTDIR)/lib/
GTEST_INCLUDES = $(GTESTDIR)/include

LAPACKDIR = ./TPLs/LAPACK/lapack-3.6.0/
LAPACK_LIB = $(LAPACKDIR)
LAPACK_INCLUDES = $(LAPACKDIR)/LAPACKE/include

ifeq ($(TARGET),papertape)
     #this is for infiniband support on papertape
     CXX_OPTS += -xAVX
endif


INCLUDES = -I$(HDF5_INCLUDE_PATH) -I$(METIS_INCLUDES) -I$(TINYXML_INCLUDES) -I$(GTEST_INCLUDES)\
	  -I$(LAPACK_INCLUDES) -I./structuralDynamics -I./ucs
LCXXFLAGS = -L$(HDF5_LIB) -L./structuralDynamics -L$(TINYXML_LIB) -L$(GTEST_LIB) -L$(LAPACK_LIB) -L./ucs
LFXXFLAGS = 

#CXXLIBS = -lmetis -lgomp -lmpi_cxx -lmpi -lefence
CXXLIBS = -lcommon -lz -lhdf5 -lm -lmpi_cxx
#more mpi stuff from running mpiCC --showme
CXXLIBS += -lstdc++ 
FXXLIBS = -lstdc++ -lmpi 

ifdef PENGUIN
      CXX_OPTS += -D_PENGUIN
endif

ifdef HAS_OPENMP
      CXX_OPTS += -fopenmp -D_OPENMP
endif

ifdef HAS_CGNS
      CXX_OPTS += -D_HAS_CGNS
      CXXLIBS += -lcgns 
endif

ifdef DEBUG
      CXX_OPTS += -g -D_DEBUG
endif

ifdef EFENCE
      CXXLIBS += -lefence
endif


ifdef HAS_PYTHON
ifdef PENGUIN
      PYTHONDIR = /public/apps/python/2.7.15/gcc.6.2.0
      INCLUDES += -I$(PYTHONDIR)/include/python2.7
      INCLUDES += -I$(PYTHONDIR)/lib/python2.7/site-packages/numpy/core/include
      LCXXFLAGS += -L$(PYTHONDIR)/lib -L/public/apps/python/2.7.15/gcc.6.2.0/lib/python2.7/site-packages/numpy/core 
      CXXLIBS += -lpython2.7 -ldl -lutil -lpthread
else
     # It is suggested that the user install and activate anaconda3 as the default python when
     # compiling ProteusCFD. This can be done by adding the following type of line to the ~/.bashrc
     # file export PATH=~/bin/anaconda3/bin:$PATH after unzipping anaconda to ~/bin/ directory.
     PYTHONCFLAGS := $(shell source ~/.bashrc && /usr/bin/python3-config --cflags)
     PYTHONLDFLAGS := $(shell source ~/.bashrc && /usr/bin/python3-config --ldflags --embed)
     PYTHONINCLUDES := $(shell source ~/.bashrc && /usr/bin/python3-config --includes)
     $(info PYTHONCFLAGS is $(PYTHONCFLAGS))     
     $(info PYTHONLDFLAGS is $(PYTHONLDFLAGS))     
     $(info PYTHONINCLUDES is $(PYTHONINCLUDES))     
     INCLUDES += $(PYTHONINCLUDES)
     LCXXFLAGS += $(PYTHONLDFLAGS)
endif
     CXX_OPTS += -D_HAS_PYTHON
endif

